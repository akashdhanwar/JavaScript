1) INTRODUCTION -
    (Lec-1) Introduction
    (Lec-2) What is Javascript 
            JavaScript is Dynamic, Interpreted and Weakly Typed Language compiled at Runtime.
            It can run on Browser or directly on any Machine(Host Environment) 
            JS was initially created to make webpages more dynamic
            MDN is its documentation
    (Lec-3) Javascript in Action
            Simple Example
    (Lec-4) Learning Community Link/File
    (Lec-5) How Javascript is Executed
    (Lec-6) Dynamic vs Weakly Typed Languages 
            

2) BASICS -
    VARIABLES - Letter, Digit, $, _ are allowed. Starting with digits not allowed

    DATA_TYPES -
    Numbers, Strings, Booleans(true/false), Objects, Arrays, undefined(default value of uninitialized variables) , null(not a default value)
    Nan(This is not a data type, mathematical calculation result)
    Conversion -
        Convert html input to a number using parseInt(input) OR +input 
        Convert to string by toString()
        3 + 3 = 6
        3 + '3' = 33
        'hi' - '3' = NaN. Only + supports string and numbers
        3 * '3' = 9
        '3' - 1 = 2

    OPERATORS -
        + , - , * , / , % , **
        = , += , -= , *- , /=
        ++ , --
        typeof hello = 'function'
        typeof null = 'object'
        typeof undefined = 'undefined'
        typeof NaN = 'number'

    FUNCTIONS -
    Shadowing means same variable in different scope. Example, same variable name created in function and global
    addEventListener for event handling, indirectly calls function on event

    Defer vs Async script import(for external script imports) -
    If we give script in head tag, scripts are loaded/downloaded and executed in sequence(not parallel to parsing), then remaining parsing is done. This could give console error since html is not parsed/ready.
    If we give script at end of body tag, then html is parsed first then script is loaded and executed.
    defer   -   Scripts are in head tag. Load scripts parallel to html parsing, executes them after parsing
    async   -   Scripts are in head tag. Load scripts parallel to html parsing, executes them right away, the script loaded first is executed first. Then remaining parsing is done.


3) EFFICIENCY_AND_DEBUGGING -
    VS CODE PREFERENCES -
    Shortcuts 
    Extensions - Prettier
    Settings

    DEBUGGING -
    Console.log      - Use console.log()
    Browser Devtools - Breakpoints, Conditional Breakpoints, Event Listener Breakpoints, 
                       F9, Scope(Value, can be changed), Watch(Watch any Value changing over time)
                       Code in sources can be change temporarily
    Inside VsCode    - Debugger for Chrome extension. Click of left of line number for breakpoint, then Debug -> Run Debugger


4) CONTROL_STRUCTURES -
    Conditional Statements          -   if, else, else-if Statements    -   Resolve to true/false (Lec-73,74,75,76,77)
                                                                            Note that Comparing Objects or Array give false. Checks hash value (Lec-78)
    Boolean Values and Operators    -   Operator Precedence             -   Check on MDN documentation (Lec-80)
                                                                            && has higher precedence than || (Lec-79)
                                        Falsy/Truthy value (Coercion)   -   var name = 'Akash'; if(name){ // true } (Lec-81,82)
                                                                            if(0) = false. Other numbers = true.
                                                                            if('') = false. Other string if('hello') = true.
                                                                            if({}) = true, if([]) = true.
                                                                            null, undefined, NaN = false
                                        Ternary Operator(Lec-93)        -   a==10 ? A : B
                                        Expression vs Statements(Lec-94)-   Expression yeilds value that can be stored
                                                                            Statements do not yield value, all Expressions are Statements 
                                        Tricks(Lec-95)                  -   !!1 = true, !!"" = false
                                                                            let name = "" || "Max" - This will store Max in name 
                                                                            let name = "Don" || "Max" - This will store Don in name 
                                                                            let name = "" || "" - This will store """ in name 
                                                                            let name = "" && "Don" - This will return ""
                                                                            let name = "Max" && "Don" - This will return Don
                                                                            Note -> ===, > just generate new boolean values which are used in the comparison. || and && generate NO booleans (Lec-96)
                                        switch case(Lec-97)   
    Loops(Lec-98)                   -   for Loop(Lec-99)                
                                        for-of Loop(Lec-100)                -   For every element in an array. for(const el of array){ console.log(el) }. No access to the index
                                        for-in Loop(Lec-101)                -   For every key in the object. for(const key in object){ console.log(key) }
                                        while, do-while Loop(Lec-102)       -   Until the condition is false
                                        break, continue(Lec-103,104)
                                        Labelled Statements(Lec-105)        -   Relate some code from some other place
                                                                                outerLoop : for(let i=0;i<3;i++){
                                                                                    for(let j=0;j<3;j++){ break outerLoop; }
                                                                                }
    Error Handling(Lec-106)         -   Throwing errors manually(Lec-107)   -   if(isNan("Hello")){ throw {message: 'Error'}; }
                                        try-catch(Lec-108)                  -   try{ Error Prone Code } catch(){ Handling code } finally{ Cleanup Work }
    Wrap-Up(Lec-109,110)


5) BEHIND THE SCENES ES3, ES5 ES6 (Lec-111) -
    ES5 vs ES6+ Syntax(Lec-112)     -   let and const introduced in ES6 (Lec-113)
                                            var     -   Function & Global Scope, Hoisting allowed. Can be recreated in same scope
                                            let     -   Block Scope 
                                            const   -   Block Scope
                                        Hoisting for var (Lec-114)
                                        "use strict"; at start of file or in a function to enable strict mode(for strict declare var name instead of name) (Lec-115)
    How Javascript works            -   In Browser, Interpreter parses code and handovers the bytecode to Compiler. Compiler converts to machine code and runs on Computer (Lec-116)
                                        (Lec-117,118) Browser manages Heap and Stack - Can be checked by adding breakpoints
                                        Heap(Memory Allocation) - Stores data in your system memory and manages access to it. 
                                        Stack(Execution Context) - Manages your program flow(function calls and communication). Stack controls which thing is happening, since Javascript is single-threaded.
                                        Note that the Event Loop(listeners) will work even after stack is emptied(Later in this course). It is in the Browser and not in Javascript Engine
                                        (Lec-119) Primitives vs Reference values
                                        Primitive Values -  String, Numbers, Boolean, null, undefined, Symbol
                                                            Stored on memory(normally on Stack)
                                                            = copies the value to different variable, copied by Value
                                        Reference Values -  All other Objects 
                                                            Stored on memory(Heap), variable stores the pointer to address
                                                            Copying copies the address and not the value, copied by Reference
                                                            Can be copied by Value using Rest operator
                                        (Lec-120) Garbage Collection
                                        How is Heap memory managed - Garbage Collector V8 in Chrome. 
                                        It checks unused/empty objects(objects without references) and clears them.
                                        Memory Leaks are objects which have reference but not in use.
                                        (Lec121,122) Wrapup




LECTURE 117
Build Calculator with logs
Resume Builder
Money Saver 
Download Code and resources at end of course
