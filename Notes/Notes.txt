1) INTRODUCTION -
    MDN is its documentation
    JavaScript is Dynamic, Interpreted and Weakly Typed Language compiled at Runtime.
    It can run on Browser or directly on any Machine(Host Environment) 
    JS was initially created to make webpages more dynamic


2) BASICS -
    VARIABLES - Letter, Digit, $, _ are allowed. Starting with digits not allowed
    let     -   Hoisting dont work, Block scope
    var     -   Hoisting works
    const   -   

    DATA_TYPES -
    Numbers, Strings, Booleans(true/false), Objects, Arrays, undefined(default value of uninitialized variables) , null(not a default value)
    Nan(This is not a data type, mathematical calculation result)
    Conversion -
        Convert html input to a number using parseInt(input) OR +input 
        Convert to string by toString()
        3 + 3 = 6
        3 + '3' = 33
        'hi' - '3' = NaN. Only + supports string and numbers
        3 * '3' = 9
        '3' - 1 = 2

    OPERATORS -
        + , - , * , / , % , **
        = , += , -= , *- , /=
        ++ , --
        typeof hello = 'function'
        typeof null = 'object'
        typeof undefined = 'undefined'
        typeof NaN = 'number'

    FUNCTIONS -
    Shadowing means same variable in different scope. Example, same variable name created in function and global
    addEventListener for event handling, indirectly calls function on event

    Defer vs Async script import(for external script imports) -
    If we give script in head tag, scripts are loaded/downloaded and executed in sequence(not parallel to parsing), then remaining parsing is done. This could give console error since html is not parsed/ready.
    If we give script at end of body tag, then html is parsed first then script is loaded and executed.
    defer   -   Scripts are in head tag. Load scripts parallel to html parsing, executes them after parsing
    async   -   Scripts are in head tag. Load scripts parallel to html parsing, executes them right away, the script loaded first is executed first. Then remaining parsing is done.


3) EFFICIENCY_AND_DEBUGGING -
    VS CODE PREFERENCES -
    Shortcuts 
    Extensions - Prettier
    Settings

    DEBUGGING -
    Console.log      - Use console.log()
    Browser Devtools - Breakpoints, Conditional Breakpoints, Event Listener Breakpoints, 
                       F9, Scope(Value, can be changed), Watch(Watch any Value changing over time)
                       Code in sources can be change temporarily
    Inside VsCode    - Debugger for Chrome extension. Click of left of line number for breakpoint, then Debug -> Run Debugger


4) CONTROL_STRUCTURES
    if, else, else-if Statements    - Resolve to true/false
                                      Note that Comparing Objects or Array give false. Checks hash value 







Build Calculator
Resume Builder
LECTURE 80
Download Code and resources at end of course